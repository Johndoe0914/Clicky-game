{"version":3,"sources":["components/header.js","components/Jumbotron.js","components/imagecards.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Navbar","fixed","className","Brand","Toggle","Collapse","Text","warning","score","topscore","jumbo","es_Jumbotron","fluid","Container","Card","value","id","onClick","handleClick","alt","src","image","App","state","images","clicked","_this","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledImages","array","i","length","j","Math","floor","random","_ref","shuffleImages","_this2","this","components_header","components_Jumbotron","map","components_imagecards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fe732c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\n\r\nfunction Header (props) {\r\n  \r\n       return (\r\n        <Navbar fixed=\"top\"className=\"Navbar\">\r\n        <Navbar.Brand >Memory Game</Navbar.Brand>\r\n        <Navbar.Toggle />\r\n        <Navbar.Collapse className=\"justify-content-center\">\r\n          <Navbar.Text>\r\n        {props.warning}\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          <Navbar.Text>\r\n            Score: {props.score} || Top Score: {props.topscore}\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n       )\r\n};\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport { Container } from \"react-bootstrap\";\r\n\r\n\r\nfunction jumbo() {\r\n\r\n       return (\r\n        <Jumbotron fluid className=\"jumbotron\">\r\n  <Container>\r\n    <h1>Memory Game</h1>\r\n    <br></br>\r\n    <p>\r\n      Click on an image to earn points, but dont click more than once!\r\n    </p>\r\n  </Container>\r\n</Jumbotron>\r\n       )\r\n};\r\n\r\n\r\nexport default jumbo;","import React from \"react\";\r\nimport \"./imagecards.css\";\r\n\r\n\r\nfunction Card(props) {\r\n    \r\n    return (\r\n       \r\n\r\n            <div className=\"card\" value={props.id} onClick={() => props.handleClick(props.id)}>\r\n                <div className=\"img-container\">\r\n                    <img  alt={props.alt} src={props.image} />\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n\r\n};\r\n\r\n\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/header\";\nimport Jumbo from \"./components/Jumbotron\";\nimport \"./components/imagecards.css\";\nimport Card from \"./components/imagecards\";\nimport images from \"./components/images.json\";\n\n\nfunction shuffleImages(array){\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  state={\n    images: images,\n    score: 0,\n    topscore: 0,\n    warning: \"click an image to begin\",\n    clicked: [],\n\n  };\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1){\n      this.handleIncrement();\n      this.setState({ clicked : this.state.clicked.concat(id)})\n    } else {\n      \n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.score + 1;\n\n    this.setState({\n      score: newScore,\n      warning: \"You guessed correctly\"\n    });\n\n    if(newScore >= this.state.topscore) {\n      this.setState({ topscore: newScore,\n        warning: \"New Topscore\"\n      })\n    } \n    else if (newScore === 12) {\n      this.setState({ warning: \"You win\"})\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      topscore: this.state.topscore,\n      warning: \"You guessed incorrectly, Try again \",\n      clicked: []\n    });\n\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledImages = shuffleImages(this.state.images);\n    this.setState({ images: shuffledImages});\n  };\n\n\n  render() {\n    return (\n     <div className=\"wrapper\">\n       <Header warning={this.state.warning} score={this.state.score} topscore={this.state.topscore} />\n       <Jumbo />\n       <div className=\"imagesContainer\">\n       {this.state.images.map(image => (\n          <Card handleClick={this.handleClick}  key={image.id} id={image.id} alt={image.alt} image={image.image} />\n       ))}\n       </div>\n      \n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}